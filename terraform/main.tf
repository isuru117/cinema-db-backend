provider "aws" {
  access_key = "${var.aws_access_key}"
  secret_key = "${var.aws_secret_key}"
  region = "${var.aws_region}"
}

resource "aws_security_group" "app_security_group" {
  name        = var.security_group
  description = "security group for ${var.tag_name}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags= {
    Name = var.security_group
  }
}

resource "aws_eip" "app_instance" {
  vpc      = true
  instance = aws_instance.app_instance.id
  tags= {
    Name = "${var.tag_name}_elastic_ip"
  }
}

resource "aws_instance" "app_instance" {
  ami = var.ami_id
  key_name = var.key_name
  instance_type = var.instance_type
  security_groups = [var.security_group]
  tags= {
    Name = var.tag_name
  }
  provisioner "file" {
    source      = "${path.cwd}/install_docker.sh"
    destination = "~/install_docker.sh"
  }
  provisioner "remote-exec" {
    inline = [
      "chmod +x ~/install_docker.sh",
      "cd ~",
      "sudo ./install_docker.sh"
    ]
  }
  connection {
    type        = "ssh"
    user        = var.username
    private_key = tls_private_key.this.private_key_pem
    host        = self.public_ip
  }
}

resource "tls_private_key" "this" {
  algorithm = "RSA"
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.key_name
  public_key = tls_private_key.this.public_key_openssh
}

output "ssh_key" {
  description = "ssh key generated by terraform"
  value       = tls_private_key.this.private_key_pem
  sensitive = true
}